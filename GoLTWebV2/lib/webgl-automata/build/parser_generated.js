/* eslint-disable */
const peggyParser = // Generated by Peggy 3.0.2.
 
//
// https://peggyjs.org/
// @ts-ignore
(function () {
    // @ts-ignore
    "use strict";
    // @ts-ignore
    function peg$subclass(child, parent) {
        // @ts-ignore
        function C() { this.constructor = child; }
        // @ts-ignore
        C.prototype = parent.prototype;
        // @ts-ignore
        child.prototype = new C();
    }
    // @ts-ignore
    function peg$SyntaxError(message, expected, found, location) {
        // @ts-ignore
        var self = Error.call(this, message);
        // istanbul ignore next Check is a necessary evil to support older environments
        // @ts-ignore
        if (Object.setPrototypeOf) {
            // @ts-ignore
            Object.setPrototypeOf(self, peg$SyntaxError.prototype);
        }
        // @ts-ignore
        self.expected = expected;
        // @ts-ignore
        self.found = found;
        // @ts-ignore
        self.location = location;
        // @ts-ignore
        self.name = "SyntaxError";
        // @ts-ignore
        return self;
    }
    // @ts-ignore
    peg$subclass(peg$SyntaxError, Error);
    // @ts-ignore
    function peg$padEnd(str, targetLength, padString) {
        // @ts-ignore
        padString = padString || " ";
        // @ts-ignore
        if (str.length > targetLength) {
            return str;
        }
        // @ts-ignore
        targetLength -= str.length;
        // @ts-ignore
        padString += padString.repeat(targetLength);
        // @ts-ignore
        return str + padString.slice(0, targetLength);
    }
    // @ts-ignore
    peg$SyntaxError.prototype.format = function (sources) {
        // @ts-ignore
        var str = "Error: " + this.message;
        // @ts-ignore
        if (this.location) {
            // @ts-ignore
            var src = null;
            // @ts-ignore
            var k;
            // @ts-ignore
            for (k = 0; k < sources.length; k++) {
                // @ts-ignore
                if (sources[k].source === this.location.source) {
                    // @ts-ignore
                    src = sources[k].text.split(/\r\n|\n|\r/g);
                    // @ts-ignore
                    break;
                }
            }
            // @ts-ignore
            var s = this.location.start;
            // @ts-ignore
            var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
                // @ts-ignore
                ? this.location.source.offset(s)
                // @ts-ignore
                : s;
            // @ts-ignore
            var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
            // @ts-ignore
            if (src) {
                // @ts-ignore
                var e = this.location.end;
                // @ts-ignore
                var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
                // @ts-ignore
                var line = src[s.line - 1];
                // @ts-ignore
                var last = s.line === e.line ? e.column : line.length + 1;
                // @ts-ignore
                var hatLen = (last - s.column) || 1;
                // @ts-ignore
                str += "\n --> " + loc + "\n"
                    // @ts-ignore
                    + filler + " |\n"
                    // @ts-ignore
                    + offset_s.line + " | " + line + "\n"
                    // @ts-ignore
                    + filler + " | " + peg$padEnd("", s.column - 1, ' ')
                    // @ts-ignore
                    + peg$padEnd("", hatLen, "^");
                // @ts-ignore
            }
            else {
                // @ts-ignore
                str += "\n at " + loc;
            }
        }
        // @ts-ignore
        return str;
    };
    // @ts-ignore
    peg$SyntaxError.buildMessage = function (expected, found) {
        // @ts-ignore
        var DESCRIBE_EXPECTATION_FNS = {
            // @ts-ignore
            literal: function (expectation) {
                // @ts-ignore
                return "\"" + literalEscape(expectation.text) + "\"";
            },
            // @ts-ignore
            class: function (expectation) {
                // @ts-ignore
                var escapedParts = expectation.parts.map(function (part) {
                    // @ts-ignore
                    return Array.isArray(part)
                        // @ts-ignore
                        ? classEscape(part[0]) + "-" + classEscape(part[1])
                        // @ts-ignore
                        : classEscape(part);
                });
                // @ts-ignore
                return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
            },
            // @ts-ignore
            any: function () {
                // @ts-ignore
                return "any character";
            },
            // @ts-ignore
            end: function () {
                // @ts-ignore
                return "end of input";
            },
            // @ts-ignore
            other: function (expectation) {
                // @ts-ignore
                return expectation.description;
            }
        };
        // @ts-ignore
        function hex(ch) {
            // @ts-ignore
            return ch.charCodeAt(0).toString(16).toUpperCase();
        }
        // @ts-ignore
        function literalEscape(s) {
            // @ts-ignore
            return s
                // @ts-ignore
                .replace(/\\/g, "\\\\")
                // @ts-ignore
                .replace(/"/g, "\\\"")
                // @ts-ignore
                .replace(/\0/g, "\\0")
                // @ts-ignore
                .replace(/\t/g, "\\t")
                // @ts-ignore
                .replace(/\n/g, "\\n")
                // @ts-ignore
                .replace(/\r/g, "\\r")
                // @ts-ignore
                .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
                // @ts-ignore
                .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
        }
        // @ts-ignore
        function classEscape(s) {
            // @ts-ignore
            return s
                // @ts-ignore
                .replace(/\\/g, "\\\\")
                // @ts-ignore
                .replace(/\]/g, "\\]")
                // @ts-ignore
                .replace(/\^/g, "\\^")
                // @ts-ignore
                .replace(/-/g, "\\-")
                // @ts-ignore
                .replace(/\0/g, "\\0")
                // @ts-ignore
                .replace(/\t/g, "\\t")
                // @ts-ignore
                .replace(/\n/g, "\\n")
                // @ts-ignore
                .replace(/\r/g, "\\r")
                // @ts-ignore
                .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
                // @ts-ignore
                .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
        }
        // @ts-ignore
        function describeExpectation(expectation) {
            // @ts-ignore
            return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
        }
        // @ts-ignore
        function describeExpected(expected) {
            // @ts-ignore
            var descriptions = expected.map(describeExpectation);
            // @ts-ignore
            var i, j;
            // @ts-ignore
            descriptions.sort();
            // @ts-ignore
            if (descriptions.length > 0) {
                // @ts-ignore
                for (i = 1, j = 1; i < descriptions.length; i++) {
                    // @ts-ignore
                    if (descriptions[i - 1] !== descriptions[i]) {
                        // @ts-ignore
                        descriptions[j] = descriptions[i];
                        // @ts-ignore
                        j++;
                    }
                }
                // @ts-ignore
                descriptions.length = j;
            }
            // @ts-ignore
            switch (descriptions.length) {
                // @ts-ignore
                case 1:
                    // @ts-ignore
                    return descriptions[0];
                // @ts-ignore
                case 2:
                    // @ts-ignore
                    return descriptions[0] + " or " + descriptions[1];
                // @ts-ignore
                default:
                    // @ts-ignore
                    return descriptions.slice(0, -1).join(", ")
                        // @ts-ignore
                        + ", or "
                        // @ts-ignore
                        + descriptions[descriptions.length - 1];
            }
        }
        // @ts-ignore
        function describeFound(found) {
            // @ts-ignore
            return found ? "\"" + literalEscape(found) + "\"" : "end of input";
        }
        // @ts-ignore
        return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
    };
    // @ts-ignore
    function peg$parse(input, options) {
        // @ts-ignore
        options = options !== undefined ? options : {};
        // @ts-ignore
        var peg$FAILED = {};
        // @ts-ignore
        var peg$source = options.grammarSource;
        // @ts-ignore
        var peg$startRuleFunctions = { expression: peg$parseexpression, program: peg$parseprogram };
        // @ts-ignore
        var peg$startRuleFunction = peg$parseexpression;
        // @ts-ignore
        var peg$c0 = "{";
        var peg$c1 = "}";
        var peg$c2 = ";";
        var peg$c3 = "bool";
        var peg$c4 = "int";
        var peg$c5 = "float";
        var peg$c6 = "=";
        var peg$c7 = "+=";
        var peg$c8 = "-=";
        var peg$c9 = "*=";
        var peg$c10 = "/=";
        var peg$c11 = "if";
        var peg$c12 = "else";
        var peg$c13 = "?";
        var peg$c14 = ":";
        var peg$c15 = "||";
        var peg$c16 = "&&";
        var peg$c17 = "==";
        var peg$c18 = "!=";
        var peg$c19 = "<";
        var peg$c20 = "<=";
        var peg$c21 = ">";
        var peg$c22 = ">=";
        var peg$c23 = "+";
        var peg$c24 = "-";
        var peg$c25 = "*";
        var peg$c26 = "/";
        var peg$c27 = "%";
        var peg$c28 = "(";
        var peg$c29 = ")";
        var peg$c30 = "true";
        var peg$c31 = "false";
        var peg$c32 = ".";
        var peg$r0 = /^[0-9]/;
        var peg$r1 = /^[a-zA-Z]/;
        var peg$r2 = /^[a-zA-Z0-9_]/;
        var peg$r3 = /^[ \t\r\n]/;
        var peg$e0 = peg$literalExpectation("{", false);
        var peg$e1 = peg$literalExpectation("}", false);
        var peg$e2 = peg$literalExpectation(";", false);
        var peg$e3 = peg$literalExpectation("bool", false);
        var peg$e4 = peg$literalExpectation("int", false);
        var peg$e5 = peg$literalExpectation("float", false);
        var peg$e6 = peg$literalExpectation("=", false);
        var peg$e7 = peg$literalExpectation("+=", false);
        var peg$e8 = peg$literalExpectation("-=", false);
        var peg$e9 = peg$literalExpectation("*=", false);
        var peg$e10 = peg$literalExpectation("/=", false);
        var peg$e11 = peg$literalExpectation("if", false);
        var peg$e12 = peg$literalExpectation("else", false);
        var peg$e13 = peg$literalExpectation("?", false);
        var peg$e14 = peg$literalExpectation(":", false);
        var peg$e15 = peg$literalExpectation("||", false);
        var peg$e16 = peg$literalExpectation("&&", false);
        var peg$e17 = peg$literalExpectation("==", false);
        var peg$e18 = peg$literalExpectation("!=", false);
        var peg$e19 = peg$literalExpectation("<", false);
        var peg$e20 = peg$literalExpectation("<=", false);
        var peg$e21 = peg$literalExpectation(">", false);
        var peg$e22 = peg$literalExpectation(">=", false);
        var peg$e23 = peg$literalExpectation("+", false);
        var peg$e24 = peg$literalExpectation("-", false);
        var peg$e25 = peg$literalExpectation("*", false);
        var peg$e26 = peg$literalExpectation("/", false);
        var peg$e27 = peg$literalExpectation("%", false);
        var peg$e28 = peg$literalExpectation("(", false);
        var peg$e29 = peg$literalExpectation(")", false);
        var peg$e30 = peg$literalExpectation("true", false);
        var peg$e31 = peg$literalExpectation("false", false);
        var peg$e32 = peg$literalExpectation(".", false);
        var peg$e33 = peg$classExpectation([["0", "9"]], false, false);
        var peg$e34 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
        var peg$e35 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false);
        var peg$e36 = peg$classExpectation([" ", "\t", "\r", "\n"], false, false);
        // @ts-ignore
        var peg$f0 = function (stmts) {
            return { type: "Program", body: stmts, loc: location() };
        }; // @ts-ignore
        var peg$f1 = function (body) {
            return { type: "Block", body: body, loc: location() };
        }; // @ts-ignore
        var peg$f2 = function (stmts) {
            return [...stmts];
        }; // @ts-ignore
        var peg$f3 = function (s) {
            return s;
        }; // @ts-ignore
        var peg$f4 = function (i) {
            return i;
        }; // @ts-ignore
        var peg$f5 = function (type, name, init) {
            return { type: "Declaration", name: name, typename: type, init: init, loc: location() };
        }; // @ts-ignore
        var peg$f6 = function (type, name) {
            return { type: "Declaration", name: name, typename: type, init: null, loc: location() };
        }; // @ts-ignore
        var peg$f7 = function (target, op, val) {
            return { type: "Assignment", target: target, op: op, value: val, loc: location() };
        }; // @ts-ignore
        var peg$f8 = function (test, consequent, alternate) {
            return { type: "Conditional", test: test, consequent: consequent, alternate: alternate, loc: location() };
        }; // @ts-ignore
        var peg$f9 = function (stmt) {
            return stmt;
        }; // @ts-ignore
        var peg$f10 = function (expr) {
            return expr;
        }; // @ts-ignore
        var peg$f11 = function (test, consequent, alternate) {
            return { type: "Ternary", test: test, consequent: consequent, alternate: alternate, loc: location() };
        }; // @ts-ignore
        var peg$f12 = function (left, right) {
            return { type: "Binary", op: "||", left: left, right: right, loc: location() };
        }; // @ts-ignore
        var peg$f13 = function (left, right) {
            return { type: "Binary", op: "&&", left: left, right: right, loc: location() };
        }; // @ts-ignore
        var peg$f14 = function (left, op, right) {
            return { type: "Binary", op: op, left: left, right: right, loc: location() };
        }; // @ts-ignore
        var peg$f15 = function (left, op, right) {
            return { type: "Binary", op: op, left: left, right: right, loc: location() };
        }; // @ts-ignore
        var peg$f16 = function (left, op, right) {
            return { type: "Binary", op: op, left: left, right: right, loc: location() };
        }; // @ts-ignore
        var peg$f17 = function (expr) {
            return expr;
        }; // @ts-ignore
        var peg$f18 = function (op, expr) {
            return { type: "Cast", op: op, expr: expr };
        }; // @ts-ignore
        var peg$f19 = function () {
            return { type: "BooleanLiteral", value: true, loc: location() };
        }; // @ts-ignore
        var peg$f20 = function () {
            return { type: "BooleanLiteral", value: false, loc: location() };
        }; // @ts-ignore
        var peg$f21 = function (digits) {
            return { type: "FloatLiteral", value: parseFloat(`0.${digits.join("")}`), loc: location() };
        }; // @ts-ignore
        var peg$f22 = function (pre, post) {
            return { type: "FloatLiteral", value: parseFloat(`${pre.join("")}.${post.join("")}`), loc: location() };
        }; // @ts-ignore
        var peg$f23 = function (digits) {
            return { type: "IntLiteral", value: parseInt(digits.join("")), loc: location() };
        }; // @ts-ignore
        var peg$f24 = function (path) {
            return { type: "Access", path: path, loc: location() };
        }; // @ts-ignore
        var peg$f25 = function (head, tail) {
            return `${head}${tail.join("")}`;
        };
        // @ts-ignore
        var peg$currPos = 0;
        // @ts-ignore
        var peg$savedPos = 0;
        // @ts-ignore
        var peg$posDetailsCache = [{ line: 1, column: 1 }];
        // @ts-ignore
        var peg$maxFailPos = 0;
        // @ts-ignore
        var peg$maxFailExpected = [];
        // @ts-ignore
        var peg$silentFails = 0;
        // @ts-ignore
        var peg$result;
        // @ts-ignore
        if ("startRule" in options) {
            // @ts-ignore
            if (!(options.startRule in peg$startRuleFunctions)) {
                // @ts-ignore
                throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
            }
            // @ts-ignore
            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }
        // @ts-ignore
        function text() {
            // @ts-ignore
            return input.substring(peg$savedPos, peg$currPos);
        }
        // @ts-ignore
        function offset() {
            // @ts-ignore
            return peg$savedPos;
        }
        // @ts-ignore
        function range() {
            // @ts-ignore
            return {
                // @ts-ignore
                source: peg$source,
                // @ts-ignore
                start: peg$savedPos,
                // @ts-ignore
                end: peg$currPos
            };
        }
        // @ts-ignore
        function location() {
            // @ts-ignore
            return peg$computeLocation(peg$savedPos, peg$currPos);
        }
        // @ts-ignore
        function expected(description, location) {
            // @ts-ignore
            location = location !== undefined
                // @ts-ignore
                ? location
                // @ts-ignore
                : peg$computeLocation(peg$savedPos, peg$currPos);
            // @ts-ignore
            throw peg$buildStructuredError(
            // @ts-ignore
            [peg$otherExpectation(description)], 
            // @ts-ignore
            input.substring(peg$savedPos, peg$currPos), 
            // @ts-ignore
            location);
        }
        // @ts-ignore
        function error(message, location) {
            // @ts-ignore
            location = location !== undefined
                // @ts-ignore
                ? location
                // @ts-ignore
                : peg$computeLocation(peg$savedPos, peg$currPos);
            // @ts-ignore
            throw peg$buildSimpleError(message, location);
        }
        // @ts-ignore
        function peg$literalExpectation(text, ignoreCase) {
            // @ts-ignore
            return { type: "literal", text: text, ignoreCase: ignoreCase };
        }
        // @ts-ignore
        function peg$classExpectation(parts, inverted, ignoreCase) {
            // @ts-ignore
            return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
        }
        // @ts-ignore
        function peg$anyExpectation() {
            // @ts-ignore
            return { type: "any" };
        }
        // @ts-ignore
        function peg$endExpectation() {
            // @ts-ignore
            return { type: "end" };
        }
        // @ts-ignore
        function peg$otherExpectation(description) {
            // @ts-ignore
            return { type: "other", description: description };
        }
        // @ts-ignore
        function peg$computePosDetails(pos) {
            // @ts-ignore
            var details = peg$posDetailsCache[pos];
            // @ts-ignore
            var p;
            // @ts-ignore
            if (details) {
                // @ts-ignore
                return details;
                // @ts-ignore
            }
            else {
                // @ts-ignore
                p = pos - 1;
                // @ts-ignore
                while (!peg$posDetailsCache[p]) {
                    // @ts-ignore
                    p--;
                }
                // @ts-ignore
                details = peg$posDetailsCache[p];
                // @ts-ignore
                details = {
                    // @ts-ignore
                    line: details.line,
                    // @ts-ignore
                    column: details.column
                };
                // @ts-ignore
                while (p < pos) {
                    // @ts-ignore
                    if (input.charCodeAt(p) === 10) {
                        // @ts-ignore
                        details.line++;
                        // @ts-ignore
                        details.column = 1;
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        details.column++;
                    }
                    // @ts-ignore
                    p++;
                }
                // @ts-ignore
                peg$posDetailsCache[pos] = details;
                // @ts-ignore
                return details;
            }
        }
        // @ts-ignore
        function peg$computeLocation(startPos, endPos, offset) {
            // @ts-ignore
            var startPosDetails = peg$computePosDetails(startPos);
            // @ts-ignore
            var endPosDetails = peg$computePosDetails(endPos);
            // @ts-ignore
            var res = {
                // @ts-ignore
                source: peg$source,
                // @ts-ignore
                start: {
                    // @ts-ignore
                    offset: startPos,
                    // @ts-ignore
                    line: startPosDetails.line,
                    // @ts-ignore
                    column: startPosDetails.column
                },
                // @ts-ignore
                end: {
                    // @ts-ignore
                    offset: endPos,
                    // @ts-ignore
                    line: endPosDetails.line,
                    // @ts-ignore
                    column: endPosDetails.column
                }
            };
            // @ts-ignore
            if (offset && peg$source && (typeof peg$source.offset === "function")) {
                // @ts-ignore
                res.start = peg$source.offset(res.start);
                // @ts-ignore
                res.end = peg$source.offset(res.end);
            }
            // @ts-ignore
            return res;
        }
        // @ts-ignore
        function peg$fail(expected) {
            // @ts-ignore
            if (peg$currPos < peg$maxFailPos) {
                return;
            }
            // @ts-ignore
            if (peg$currPos > peg$maxFailPos) {
                // @ts-ignore
                peg$maxFailPos = peg$currPos;
                // @ts-ignore
                peg$maxFailExpected = [];
            }
            // @ts-ignore
            peg$maxFailExpected.push(expected);
        }
        // @ts-ignore
        function peg$buildSimpleError(message, location) {
            // @ts-ignore
            return new peg$SyntaxError(message, null, null, location);
        }
        // @ts-ignore
        function peg$buildStructuredError(expected, found, location) {
            // @ts-ignore
            return new peg$SyntaxError(
            // @ts-ignore
            peg$SyntaxError.buildMessage(expected, found), 
            // @ts-ignore
            expected, 
            // @ts-ignore
            found, 
            // @ts-ignore
            location);
        }
        // @ts-ignore
        function peg$parseprogram() {
            // @ts-ignore
            var s0, s1, s2, s3;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            s1 = peg$parse_();
            // @ts-ignore
            s2 = peg$parsestmtlist();
            // @ts-ignore
            s3 = peg$parse_();
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f0(s2);
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parseblock() {
            // @ts-ignore
            var s0, s1, s2, s3, s4, s5, s6, s7;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            s1 = peg$parse_();
            // @ts-ignore
            if (input.charCodeAt(peg$currPos) === 123) {
                // @ts-ignore
                s2 = peg$c0;
                // @ts-ignore
                peg$currPos++;
                // @ts-ignore
            }
            else {
                // @ts-ignore
                s2 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                    peg$fail(peg$e0);
                }
            }
            // @ts-ignore
            if (s2 !== peg$FAILED) {
                // @ts-ignore
                s3 = peg$parse_();
                // @ts-ignore
                s4 = peg$parsestmtlist();
                // @ts-ignore
                if (s4 !== peg$FAILED) {
                    // @ts-ignore
                    s5 = peg$parse_();
                    // @ts-ignore
                    if (input.charCodeAt(peg$currPos) === 125) {
                        // @ts-ignore
                        s6 = peg$c1;
                        // @ts-ignore
                        peg$currPos++;
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        s6 = peg$FAILED;
                        // @ts-ignore
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e1);
                        }
                    }
                    // @ts-ignore
                    if (s6 !== peg$FAILED) {
                        // @ts-ignore
                        s7 = peg$parse_();
                        // @ts-ignore
                        peg$savedPos = s0;
                        // @ts-ignore
                        s0 = peg$f1(s4);
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        peg$currPos = s0;
                        // @ts-ignore
                        s0 = peg$FAILED;
                    }
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                }
                // @ts-ignore
            }
            else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parsestmtlist() {
            // @ts-ignore
            var s0, s1, s2, s3;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            s1 = [];
            // @ts-ignore
            s2 = peg$parsestmt();
            // @ts-ignore
            while (s2 !== peg$FAILED) {
                // @ts-ignore
                s1.push(s2);
                // @ts-ignore
                s2 = peg$currPos;
                // @ts-ignore
                s3 = '';
                // @ts-ignore
                s3 = peg$parsestmt();
                // @ts-ignore
                if (s3 === peg$FAILED) {
                    // @ts-ignore
                    peg$currPos = s2;
                    // @ts-ignore
                    s2 = peg$FAILED;
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s2 = s3;
                }
            }
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s1 = peg$f2(s1);
            // @ts-ignore
            s0 = s1;
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parsestmt() {
            // @ts-ignore
            var s0, s1, s2, s3, s4, s5;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            s1 = peg$parse_();
            // @ts-ignore
            s2 = peg$parsedeclaration();
            // @ts-ignore
            if (s2 === peg$FAILED) {
                // @ts-ignore
                s2 = peg$parseassignment();
            }
            // @ts-ignore
            if (s2 !== peg$FAILED) {
                // @ts-ignore
                s3 = peg$parse_();
                // @ts-ignore
                if (input.charCodeAt(peg$currPos) === 59) {
                    // @ts-ignore
                    s4 = peg$c2;
                    // @ts-ignore
                    peg$currPos++;
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s4 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e2);
                    }
                }
                // @ts-ignore
                if (s4 !== peg$FAILED) {
                    // @ts-ignore
                    s5 = peg$parse_();
                    // @ts-ignore
                    peg$savedPos = s0;
                    // @ts-ignore
                    s0 = peg$f3(s2);
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                }
                // @ts-ignore
            }
            else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
            }
            // @ts-ignore
            if (s0 === peg$FAILED) {
                // @ts-ignore
                s0 = peg$parseblock();
                // @ts-ignore
                if (s0 === peg$FAILED) {
                    // @ts-ignore
                    s0 = peg$currPos;
                    // @ts-ignore
                    s1 = peg$parse_();
                    // @ts-ignore
                    s2 = peg$parseif();
                    // @ts-ignore
                    if (s2 !== peg$FAILED) {
                        // @ts-ignore
                        s3 = peg$parse_();
                        // @ts-ignore
                        peg$savedPos = s0;
                        // @ts-ignore
                        s0 = peg$f4(s2);
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        peg$currPos = s0;
                        // @ts-ignore
                        s0 = peg$FAILED;
                    }
                }
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parsedeclaration() {
            // @ts-ignore
            var s0, s1, s2, s3, s4, s5, s6, s7;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            if (input.substr(peg$currPos, 4) === peg$c3) {
                // @ts-ignore
                s1 = peg$c3;
                // @ts-ignore
                peg$currPos += 4;
                // @ts-ignore
            }
            else {
                // @ts-ignore
                s1 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                    peg$fail(peg$e3);
                }
            }
            // @ts-ignore
            if (s1 === peg$FAILED) {
                // @ts-ignore
                if (input.substr(peg$currPos, 3) === peg$c4) {
                    // @ts-ignore
                    s1 = peg$c4;
                    // @ts-ignore
                    peg$currPos += 3;
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s1 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e4);
                    }
                }
                // @ts-ignore
                if (s1 === peg$FAILED) {
                    // @ts-ignore
                    if (input.substr(peg$currPos, 5) === peg$c5) {
                        // @ts-ignore
                        s1 = peg$c5;
                        // @ts-ignore
                        peg$currPos += 5;
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        s1 = peg$FAILED;
                        // @ts-ignore
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e5);
                        }
                    }
                }
            }
            // @ts-ignore
            if (s1 !== peg$FAILED) {
                // @ts-ignore
                s2 = peg$parse__();
                // @ts-ignore
                if (s2 !== peg$FAILED) {
                    // @ts-ignore
                    s3 = peg$parseidentifier();
                    // @ts-ignore
                    if (s3 !== peg$FAILED) {
                        // @ts-ignore
                        s4 = peg$parse_();
                        // @ts-ignore
                        if (input.charCodeAt(peg$currPos) === 61) {
                            // @ts-ignore
                            s5 = peg$c6;
                            // @ts-ignore
                            peg$currPos++;
                            // @ts-ignore
                        }
                        else {
                            // @ts-ignore
                            s5 = peg$FAILED;
                            // @ts-ignore
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e6);
                            }
                        }
                        // @ts-ignore
                        if (s5 !== peg$FAILED) {
                            // @ts-ignore
                            s6 = peg$parse_();
                            // @ts-ignore
                            s7 = peg$parseexpression();
                            // @ts-ignore
                            if (s7 !== peg$FAILED) {
                                // @ts-ignore
                                peg$savedPos = s0;
                                // @ts-ignore
                                s0 = peg$f5(s1, s3, s7);
                                // @ts-ignore
                            }
                            else {
                                // @ts-ignore
                                peg$currPos = s0;
                                // @ts-ignore
                                s0 = peg$FAILED;
                            }
                            // @ts-ignore
                        }
                        else {
                            // @ts-ignore
                            peg$currPos = s0;
                            // @ts-ignore
                            s0 = peg$FAILED;
                        }
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        peg$currPos = s0;
                        // @ts-ignore
                        s0 = peg$FAILED;
                    }
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                }
                // @ts-ignore
            }
            else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
            }
            // @ts-ignore
            if (s0 === peg$FAILED) {
                // @ts-ignore
                s0 = peg$currPos;
                // @ts-ignore
                if (input.substr(peg$currPos, 4) === peg$c3) {
                    // @ts-ignore
                    s1 = peg$c3;
                    // @ts-ignore
                    peg$currPos += 4;
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s1 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e3);
                    }
                }
                // @ts-ignore
                if (s1 === peg$FAILED) {
                    // @ts-ignore
                    if (input.substr(peg$currPos, 3) === peg$c4) {
                        // @ts-ignore
                        s1 = peg$c4;
                        // @ts-ignore
                        peg$currPos += 3;
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        s1 = peg$FAILED;
                        // @ts-ignore
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e4);
                        }
                    }
                    // @ts-ignore
                    if (s1 === peg$FAILED) {
                        // @ts-ignore
                        if (input.substr(peg$currPos, 5) === peg$c5) {
                            // @ts-ignore
                            s1 = peg$c5;
                            // @ts-ignore
                            peg$currPos += 5;
                            // @ts-ignore
                        }
                        else {
                            // @ts-ignore
                            s1 = peg$FAILED;
                            // @ts-ignore
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e5);
                            }
                        }
                    }
                }
                // @ts-ignore
                if (s1 !== peg$FAILED) {
                    // @ts-ignore
                    s2 = peg$parse__();
                    // @ts-ignore
                    if (s2 !== peg$FAILED) {
                        // @ts-ignore
                        s3 = peg$parseidentifier();
                        // @ts-ignore
                        if (s3 !== peg$FAILED) {
                            // @ts-ignore
                            peg$savedPos = s0;
                            // @ts-ignore
                            s0 = peg$f6(s1, s3);
                            // @ts-ignore
                        }
                        else {
                            // @ts-ignore
                            peg$currPos = s0;
                            // @ts-ignore
                            s0 = peg$FAILED;
                        }
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        peg$currPos = s0;
                        // @ts-ignore
                        s0 = peg$FAILED;
                    }
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                }
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parseassignment() {
            // @ts-ignore
            var s0, s1, s2, s3, s4, s5;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            s1 = peg$parseaccess();
            // @ts-ignore
            s2 = peg$parse_();
            // @ts-ignore
            if (input.charCodeAt(peg$currPos) === 61) {
                // @ts-ignore
                s3 = peg$c6;
                // @ts-ignore
                peg$currPos++;
                // @ts-ignore
            }
            else {
                // @ts-ignore
                s3 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                    peg$fail(peg$e6);
                }
            }
            // @ts-ignore
            if (s3 === peg$FAILED) {
                // @ts-ignore
                if (input.substr(peg$currPos, 2) === peg$c7) {
                    // @ts-ignore
                    s3 = peg$c7;
                    // @ts-ignore
                    peg$currPos += 2;
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s3 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e7);
                    }
                }
                // @ts-ignore
                if (s3 === peg$FAILED) {
                    // @ts-ignore
                    if (input.substr(peg$currPos, 2) === peg$c8) {
                        // @ts-ignore
                        s3 = peg$c8;
                        // @ts-ignore
                        peg$currPos += 2;
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        s3 = peg$FAILED;
                        // @ts-ignore
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e8);
                        }
                    }
                    // @ts-ignore
                    if (s3 === peg$FAILED) {
                        // @ts-ignore
                        if (input.substr(peg$currPos, 2) === peg$c9) {
                            // @ts-ignore
                            s3 = peg$c9;
                            // @ts-ignore
                            peg$currPos += 2;
                            // @ts-ignore
                        }
                        else {
                            // @ts-ignore
                            s3 = peg$FAILED;
                            // @ts-ignore
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e9);
                            }
                        }
                        // @ts-ignore
                        if (s3 === peg$FAILED) {
                            // @ts-ignore
                            if (input.substr(peg$currPos, 2) === peg$c10) {
                                // @ts-ignore
                                s3 = peg$c10;
                                // @ts-ignore
                                peg$currPos += 2;
                                // @ts-ignore
                            }
                            else {
                                // @ts-ignore
                                s3 = peg$FAILED;
                                // @ts-ignore
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$e10);
                                }
                            }
                        }
                    }
                }
            }
            // @ts-ignore
            if (s3 !== peg$FAILED) {
                // @ts-ignore
                s4 = peg$parse_();
                // @ts-ignore
                s5 = peg$parseexpression();
                // @ts-ignore
                if (s5 !== peg$FAILED) {
                    // @ts-ignore
                    peg$savedPos = s0;
                    // @ts-ignore
                    s0 = peg$f7(s1, s3, s5);
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                }
                // @ts-ignore
            }
            else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parseif() {
            // @ts-ignore
            var s0, s1, s2, s3, s4, s5, s6, s7;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            if (input.substr(peg$currPos, 2) === peg$c11) {
                // @ts-ignore
                s1 = peg$c11;
                // @ts-ignore
                peg$currPos += 2;
                // @ts-ignore
            }
            else {
                // @ts-ignore
                s1 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                    peg$fail(peg$e11);
                }
            }
            // @ts-ignore
            if (s1 !== peg$FAILED) {
                // @ts-ignore
                s2 = peg$parse__();
                // @ts-ignore
                if (s2 !== peg$FAILED) {
                    // @ts-ignore
                    s3 = peg$parseexpression();
                    // @ts-ignore
                    if (s3 !== peg$FAILED) {
                        // @ts-ignore
                        s4 = peg$parse_();
                        // @ts-ignore
                        s5 = peg$parsestmt();
                        // @ts-ignore
                        if (s5 !== peg$FAILED) {
                            // @ts-ignore
                            s6 = peg$parse_();
                            // @ts-ignore
                            s7 = peg$parseelse();
                            // @ts-ignore
                            if (s7 === peg$FAILED) {
                                // @ts-ignore
                                s7 = null;
                            }
                            // @ts-ignore
                            peg$savedPos = s0;
                            // @ts-ignore
                            s0 = peg$f8(s3, s5, s7);
                            // @ts-ignore
                        }
                        else {
                            // @ts-ignore
                            peg$currPos = s0;
                            // @ts-ignore
                            s0 = peg$FAILED;
                        }
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        peg$currPos = s0;
                        // @ts-ignore
                        s0 = peg$FAILED;
                    }
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                }
                // @ts-ignore
            }
            else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parseelse() {
            // @ts-ignore
            var s0, s1, s2, s3;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            if (input.substr(peg$currPos, 4) === peg$c12) {
                // @ts-ignore
                s1 = peg$c12;
                // @ts-ignore
                peg$currPos += 4;
                // @ts-ignore
            }
            else {
                // @ts-ignore
                s1 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                    peg$fail(peg$e12);
                }
            }
            // @ts-ignore
            if (s1 !== peg$FAILED) {
                // @ts-ignore
                s2 = peg$parse_();
                // @ts-ignore
                s3 = peg$parsestmt();
                // @ts-ignore
                if (s3 !== peg$FAILED) {
                    // @ts-ignore
                    peg$savedPos = s0;
                    // @ts-ignore
                    s0 = peg$f9(s3);
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                }
                // @ts-ignore
            }
            else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parseexpression() {
            // @ts-ignore
            var s0, s1, s2, s3;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            s1 = peg$parse_();
            // @ts-ignore
            s2 = peg$parseternary();
            // @ts-ignore
            if (s2 !== peg$FAILED) {
                // @ts-ignore
                s3 = peg$parse_();
                // @ts-ignore
                peg$savedPos = s0;
                // @ts-ignore
                s0 = peg$f10(s2);
                // @ts-ignore
            }
            else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parseternary() {
            // @ts-ignore
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            s1 = peg$parselogicor();
            // @ts-ignore
            if (s1 !== peg$FAILED) {
                // @ts-ignore
                s2 = peg$parse_();
                // @ts-ignore
                if (input.charCodeAt(peg$currPos) === 63) {
                    // @ts-ignore
                    s3 = peg$c13;
                    // @ts-ignore
                    peg$currPos++;
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s3 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e13);
                    }
                }
                // @ts-ignore
                if (s3 !== peg$FAILED) {
                    // @ts-ignore
                    s4 = peg$parse_();
                    // @ts-ignore
                    s5 = peg$parselogicor();
                    // @ts-ignore
                    if (s5 !== peg$FAILED) {
                        // @ts-ignore
                        s6 = peg$parse_();
                        // @ts-ignore
                        if (input.charCodeAt(peg$currPos) === 58) {
                            // @ts-ignore
                            s7 = peg$c14;
                            // @ts-ignore
                            peg$currPos++;
                            // @ts-ignore
                        }
                        else {
                            // @ts-ignore
                            s7 = peg$FAILED;
                            // @ts-ignore
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e14);
                            }
                        }
                        // @ts-ignore
                        if (s7 !== peg$FAILED) {
                            // @ts-ignore
                            s8 = peg$parse_();
                            // @ts-ignore
                            s9 = peg$parselogicor();
                            // @ts-ignore
                            if (s9 !== peg$FAILED) {
                                // @ts-ignore
                                peg$savedPos = s0;
                                // @ts-ignore
                                s0 = peg$f11(s1, s5, s9);
                                // @ts-ignore
                            }
                            else {
                                // @ts-ignore
                                peg$currPos = s0;
                                // @ts-ignore
                                s0 = peg$FAILED;
                            }
                            // @ts-ignore
                        }
                        else {
                            // @ts-ignore
                            peg$currPos = s0;
                            // @ts-ignore
                            s0 = peg$FAILED;
                        }
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        peg$currPos = s0;
                        // @ts-ignore
                        s0 = peg$FAILED;
                    }
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                }
                // @ts-ignore
            }
            else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
            }
            // @ts-ignore
            if (s0 === peg$FAILED) {
                // @ts-ignore
                s0 = peg$parselogicor();
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parselogicor() {
            // @ts-ignore
            var s0, s1, s2, s3, s4, s5;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            s1 = peg$parselogicand();
            // @ts-ignore
            if (s1 !== peg$FAILED) {
                // @ts-ignore
                s2 = peg$parse_();
                // @ts-ignore
                if (input.substr(peg$currPos, 2) === peg$c15) {
                    // @ts-ignore
                    s3 = peg$c15;
                    // @ts-ignore
                    peg$currPos += 2;
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s3 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e15);
                    }
                }
                // @ts-ignore
                if (s3 !== peg$FAILED) {
                    // @ts-ignore
                    s4 = peg$parse_();
                    // @ts-ignore
                    s5 = peg$parselogicor();
                    // @ts-ignore
                    if (s5 !== peg$FAILED) {
                        // @ts-ignore
                        peg$savedPos = s0;
                        // @ts-ignore
                        s0 = peg$f12(s1, s5);
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        peg$currPos = s0;
                        // @ts-ignore
                        s0 = peg$FAILED;
                    }
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                }
                // @ts-ignore
            }
            else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
            }
            // @ts-ignore
            if (s0 === peg$FAILED) {
                // @ts-ignore
                s0 = peg$parselogicand();
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parselogicand() {
            // @ts-ignore
            var s0, s1, s2, s3, s4, s5;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            s1 = peg$parserelational();
            // @ts-ignore
            if (s1 !== peg$FAILED) {
                // @ts-ignore
                s2 = peg$parse_();
                // @ts-ignore
                if (input.substr(peg$currPos, 2) === peg$c16) {
                    // @ts-ignore
                    s3 = peg$c16;
                    // @ts-ignore
                    peg$currPos += 2;
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s3 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e16);
                    }
                }
                // @ts-ignore
                if (s3 !== peg$FAILED) {
                    // @ts-ignore
                    s4 = peg$parse_();
                    // @ts-ignore
                    s5 = peg$parselogicand();
                    // @ts-ignore
                    if (s5 !== peg$FAILED) {
                        // @ts-ignore
                        peg$savedPos = s0;
                        // @ts-ignore
                        s0 = peg$f13(s1, s5);
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        peg$currPos = s0;
                        // @ts-ignore
                        s0 = peg$FAILED;
                    }
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                }
                // @ts-ignore
            }
            else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
            }
            // @ts-ignore
            if (s0 === peg$FAILED) {
                // @ts-ignore
                s0 = peg$parserelational();
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parserelational() {
            // @ts-ignore
            var s0, s1, s2, s3, s4, s5;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            s1 = peg$parseadditive();
            // @ts-ignore
            if (s1 !== peg$FAILED) {
                // @ts-ignore
                s2 = peg$parse_();
                // @ts-ignore
                if (input.substr(peg$currPos, 2) === peg$c17) {
                    // @ts-ignore
                    s3 = peg$c17;
                    // @ts-ignore
                    peg$currPos += 2;
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s3 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e17);
                    }
                }
                // @ts-ignore
                if (s3 === peg$FAILED) {
                    // @ts-ignore
                    if (input.substr(peg$currPos, 2) === peg$c18) {
                        // @ts-ignore
                        s3 = peg$c18;
                        // @ts-ignore
                        peg$currPos += 2;
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        s3 = peg$FAILED;
                        // @ts-ignore
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e18);
                        }
                    }
                    // @ts-ignore
                    if (s3 === peg$FAILED) {
                        // @ts-ignore
                        if (input.charCodeAt(peg$currPos) === 60) {
                            // @ts-ignore
                            s3 = peg$c19;
                            // @ts-ignore
                            peg$currPos++;
                            // @ts-ignore
                        }
                        else {
                            // @ts-ignore
                            s3 = peg$FAILED;
                            // @ts-ignore
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e19);
                            }
                        }
                        // @ts-ignore
                        if (s3 === peg$FAILED) {
                            // @ts-ignore
                            if (input.substr(peg$currPos, 2) === peg$c20) {
                                // @ts-ignore
                                s3 = peg$c20;
                                // @ts-ignore
                                peg$currPos += 2;
                                // @ts-ignore
                            }
                            else {
                                // @ts-ignore
                                s3 = peg$FAILED;
                                // @ts-ignore
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$e20);
                                }
                            }
                            // @ts-ignore
                            if (s3 === peg$FAILED) {
                                // @ts-ignore
                                if (input.charCodeAt(peg$currPos) === 62) {
                                    // @ts-ignore
                                    s3 = peg$c21;
                                    // @ts-ignore
                                    peg$currPos++;
                                    // @ts-ignore
                                }
                                else {
                                    // @ts-ignore
                                    s3 = peg$FAILED;
                                    // @ts-ignore
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$e21);
                                    }
                                }
                                // @ts-ignore
                                if (s3 === peg$FAILED) {
                                    // @ts-ignore
                                    if (input.substr(peg$currPos, 2) === peg$c22) {
                                        // @ts-ignore
                                        s3 = peg$c22;
                                        // @ts-ignore
                                        peg$currPos += 2;
                                        // @ts-ignore
                                    }
                                    else {
                                        // @ts-ignore
                                        s3 = peg$FAILED;
                                        // @ts-ignore
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$e22);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                // @ts-ignore
                if (s3 !== peg$FAILED) {
                    // @ts-ignore
                    s4 = peg$parse_();
                    // @ts-ignore
                    s5 = peg$parserelational();
                    // @ts-ignore
                    if (s5 !== peg$FAILED) {
                        // @ts-ignore
                        peg$savedPos = s0;
                        // @ts-ignore
                        s0 = peg$f14(s1, s3, s5);
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        peg$currPos = s0;
                        // @ts-ignore
                        s0 = peg$FAILED;
                    }
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                }
                // @ts-ignore
            }
            else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
            }
            // @ts-ignore
            if (s0 === peg$FAILED) {
                // @ts-ignore
                s0 = peg$parseadditive();
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parseadditive() {
            // @ts-ignore
            var s0, s1, s2, s3, s4, s5;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            s1 = peg$parsemultiplicative();
            // @ts-ignore
            if (s1 !== peg$FAILED) {
                // @ts-ignore
                s2 = peg$parse_();
                // @ts-ignore
                if (input.charCodeAt(peg$currPos) === 43) {
                    // @ts-ignore
                    s3 = peg$c23;
                    // @ts-ignore
                    peg$currPos++;
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s3 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e23);
                    }
                }
                // @ts-ignore
                if (s3 === peg$FAILED) {
                    // @ts-ignore
                    if (input.charCodeAt(peg$currPos) === 45) {
                        // @ts-ignore
                        s3 = peg$c24;
                        // @ts-ignore
                        peg$currPos++;
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        s3 = peg$FAILED;
                        // @ts-ignore
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e24);
                        }
                    }
                }
                // @ts-ignore
                if (s3 !== peg$FAILED) {
                    // @ts-ignore
                    s4 = peg$parse_();
                    // @ts-ignore
                    s5 = peg$parseadditive();
                    // @ts-ignore
                    if (s5 !== peg$FAILED) {
                        // @ts-ignore
                        peg$savedPos = s0;
                        // @ts-ignore
                        s0 = peg$f15(s1, s3, s5);
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        peg$currPos = s0;
                        // @ts-ignore
                        s0 = peg$FAILED;
                    }
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                }
                // @ts-ignore
            }
            else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
            }
            // @ts-ignore
            if (s0 === peg$FAILED) {
                // @ts-ignore
                s0 = peg$parsemultiplicative();
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parsemultiplicative() {
            // @ts-ignore
            var s0, s1, s2, s3, s4, s5;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            s1 = peg$parseprimary();
            // @ts-ignore
            if (s1 !== peg$FAILED) {
                // @ts-ignore
                s2 = peg$parse_();
                // @ts-ignore
                if (input.charCodeAt(peg$currPos) === 42) {
                    // @ts-ignore
                    s3 = peg$c25;
                    // @ts-ignore
                    peg$currPos++;
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s3 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e25);
                    }
                }
                // @ts-ignore
                if (s3 === peg$FAILED) {
                    // @ts-ignore
                    if (input.charCodeAt(peg$currPos) === 47) {
                        // @ts-ignore
                        s3 = peg$c26;
                        // @ts-ignore
                        peg$currPos++;
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        s3 = peg$FAILED;
                        // @ts-ignore
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e26);
                        }
                    }
                    // @ts-ignore
                    if (s3 === peg$FAILED) {
                        // @ts-ignore
                        if (input.charCodeAt(peg$currPos) === 37) {
                            // @ts-ignore
                            s3 = peg$c27;
                            // @ts-ignore
                            peg$currPos++;
                            // @ts-ignore
                        }
                        else {
                            // @ts-ignore
                            s3 = peg$FAILED;
                            // @ts-ignore
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e27);
                            }
                        }
                    }
                }
                // @ts-ignore
                if (s3 !== peg$FAILED) {
                    // @ts-ignore
                    s4 = peg$parse_();
                    // @ts-ignore
                    s5 = peg$parsemultiplicative();
                    // @ts-ignore
                    if (s5 !== peg$FAILED) {
                        // @ts-ignore
                        peg$savedPos = s0;
                        // @ts-ignore
                        s0 = peg$f16(s1, s3, s5);
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        peg$currPos = s0;
                        // @ts-ignore
                        s0 = peg$FAILED;
                    }
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                }
                // @ts-ignore
            }
            else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
            }
            // @ts-ignore
            if (s0 === peg$FAILED) {
                // @ts-ignore
                s0 = peg$parseprimary();
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parseprimary() {
            // @ts-ignore
            var s0, s1, s2, s3, s4, s5;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            if (input.charCodeAt(peg$currPos) === 40) {
                // @ts-ignore
                s1 = peg$c28;
                // @ts-ignore
                peg$currPos++;
                // @ts-ignore
            }
            else {
                // @ts-ignore
                s1 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                    peg$fail(peg$e28);
                }
            }
            // @ts-ignore
            if (s1 !== peg$FAILED) {
                // @ts-ignore
                s2 = peg$parse_();
                // @ts-ignore
                s3 = peg$parseexpression();
                // @ts-ignore
                if (s3 !== peg$FAILED) {
                    // @ts-ignore
                    s4 = peg$parse_();
                    // @ts-ignore
                    if (input.charCodeAt(peg$currPos) === 41) {
                        // @ts-ignore
                        s5 = peg$c29;
                        // @ts-ignore
                        peg$currPos++;
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        s5 = peg$FAILED;
                        // @ts-ignore
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e29);
                        }
                    }
                    // @ts-ignore
                    if (s5 !== peg$FAILED) {
                        // @ts-ignore
                        peg$savedPos = s0;
                        // @ts-ignore
                        s0 = peg$f17(s3);
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        peg$currPos = s0;
                        // @ts-ignore
                        s0 = peg$FAILED;
                    }
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                }
                // @ts-ignore
            }
            else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
            }
            // @ts-ignore
            if (s0 === peg$FAILED) {
                // @ts-ignore
                s0 = peg$parsecast();
                // @ts-ignore
                if (s0 === peg$FAILED) {
                    // @ts-ignore
                    s0 = peg$parseliteral();
                    // @ts-ignore
                    if (s0 === peg$FAILED) {
                        // @ts-ignore
                        s0 = peg$parseaccess();
                    }
                }
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parsecast() {
            // @ts-ignore
            var s0, s1, s2, s3, s4, s5, s6, s7;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            if (input.substr(peg$currPos, 3) === peg$c4) {
                // @ts-ignore
                s1 = peg$c4;
                // @ts-ignore
                peg$currPos += 3;
                // @ts-ignore
            }
            else {
                // @ts-ignore
                s1 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                    peg$fail(peg$e4);
                }
            }
            // @ts-ignore
            if (s1 === peg$FAILED) {
                // @ts-ignore
                if (input.substr(peg$currPos, 5) === peg$c5) {
                    // @ts-ignore
                    s1 = peg$c5;
                    // @ts-ignore
                    peg$currPos += 5;
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s1 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e5);
                    }
                }
                // @ts-ignore
                if (s1 === peg$FAILED) {
                    // @ts-ignore
                    if (input.substr(peg$currPos, 4) === peg$c3) {
                        // @ts-ignore
                        s1 = peg$c3;
                        // @ts-ignore
                        peg$currPos += 4;
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        s1 = peg$FAILED;
                        // @ts-ignore
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e3);
                        }
                    }
                }
            }
            // @ts-ignore
            if (s1 !== peg$FAILED) {
                // @ts-ignore
                s2 = peg$parse_();
                // @ts-ignore
                if (input.charCodeAt(peg$currPos) === 40) {
                    // @ts-ignore
                    s3 = peg$c28;
                    // @ts-ignore
                    peg$currPos++;
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s3 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e28);
                    }
                }
                // @ts-ignore
                if (s3 !== peg$FAILED) {
                    // @ts-ignore
                    s4 = peg$parse_();
                    // @ts-ignore
                    s5 = peg$parseexpression();
                    // @ts-ignore
                    if (s5 !== peg$FAILED) {
                        // @ts-ignore
                        s6 = peg$parse_();
                        // @ts-ignore
                        if (input.charCodeAt(peg$currPos) === 41) {
                            // @ts-ignore
                            s7 = peg$c29;
                            // @ts-ignore
                            peg$currPos++;
                            // @ts-ignore
                        }
                        else {
                            // @ts-ignore
                            s7 = peg$FAILED;
                            // @ts-ignore
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e29);
                            }
                        }
                        // @ts-ignore
                        if (s7 !== peg$FAILED) {
                            // @ts-ignore
                            peg$savedPos = s0;
                            // @ts-ignore
                            s0 = peg$f18(s1, s5);
                            // @ts-ignore
                        }
                        else {
                            // @ts-ignore
                            peg$currPos = s0;
                            // @ts-ignore
                            s0 = peg$FAILED;
                        }
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        peg$currPos = s0;
                        // @ts-ignore
                        s0 = peg$FAILED;
                    }
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                }
                // @ts-ignore
            }
            else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parseliteral() {
            // @ts-ignore
            var s0;
            // @ts-ignore
            s0 = peg$parsebooleanliteral();
            // @ts-ignore
            if (s0 === peg$FAILED) {
                // @ts-ignore
                s0 = peg$parsefloatliteral();
                // @ts-ignore
                if (s0 === peg$FAILED) {
                    // @ts-ignore
                    s0 = peg$parseintliteral();
                }
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parsebooleanliteral() {
            // @ts-ignore
            var s0, s1;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            if (input.substr(peg$currPos, 4) === peg$c30) {
                // @ts-ignore
                s1 = peg$c30;
                // @ts-ignore
                peg$currPos += 4;
                // @ts-ignore
            }
            else {
                // @ts-ignore
                s1 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                    peg$fail(peg$e30);
                }
            }
            // @ts-ignore
            if (s1 !== peg$FAILED) {
                // @ts-ignore
                peg$savedPos = s0;
                // @ts-ignore
                s1 = peg$f19();
            }
            // @ts-ignore
            s0 = s1;
            // @ts-ignore
            if (s0 === peg$FAILED) {
                // @ts-ignore
                s0 = peg$currPos;
                // @ts-ignore
                if (input.substr(peg$currPos, 5) === peg$c31) {
                    // @ts-ignore
                    s1 = peg$c31;
                    // @ts-ignore
                    peg$currPos += 5;
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s1 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e31);
                    }
                }
                // @ts-ignore
                if (s1 !== peg$FAILED) {
                    // @ts-ignore
                    peg$savedPos = s0;
                    // @ts-ignore
                    s1 = peg$f20();
                }
                // @ts-ignore
                s0 = s1;
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parsefloatliteral() {
            // @ts-ignore
            var s0, s1, s2, s3, s4;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            if (input.charCodeAt(peg$currPos) === 46) {
                // @ts-ignore
                s1 = peg$c32;
                // @ts-ignore
                peg$currPos++;
                // @ts-ignore
            }
            else {
                // @ts-ignore
                s1 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                    peg$fail(peg$e32);
                }
            }
            // @ts-ignore
            if (s1 !== peg$FAILED) {
                // @ts-ignore
                s2 = [];
                // @ts-ignore
                if (peg$r0.test(input.charAt(peg$currPos))) {
                    // @ts-ignore
                    s3 = input.charAt(peg$currPos);
                    // @ts-ignore
                    peg$currPos++;
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s3 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e33);
                    }
                }
                // @ts-ignore
                if (s3 !== peg$FAILED) {
                    // @ts-ignore
                    while (s3 !== peg$FAILED) {
                        // @ts-ignore
                        s2.push(s3);
                        // @ts-ignore
                        if (peg$r0.test(input.charAt(peg$currPos))) {
                            // @ts-ignore
                            s3 = input.charAt(peg$currPos);
                            // @ts-ignore
                            peg$currPos++;
                            // @ts-ignore
                        }
                        else {
                            // @ts-ignore
                            s3 = peg$FAILED;
                            // @ts-ignore
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e33);
                            }
                        }
                    }
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s2 = peg$FAILED;
                }
                // @ts-ignore
                if (s2 !== peg$FAILED) {
                    // @ts-ignore
                    peg$savedPos = s0;
                    // @ts-ignore
                    s0 = peg$f21(s2);
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                }
                // @ts-ignore
            }
            else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
            }
            // @ts-ignore
            if (s0 === peg$FAILED) {
                // @ts-ignore
                s0 = peg$currPos;
                // @ts-ignore
                s1 = [];
                // @ts-ignore
                if (peg$r0.test(input.charAt(peg$currPos))) {
                    // @ts-ignore
                    s2 = input.charAt(peg$currPos);
                    // @ts-ignore
                    peg$currPos++;
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s2 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e33);
                    }
                }
                // @ts-ignore
                if (s2 !== peg$FAILED) {
                    // @ts-ignore
                    while (s2 !== peg$FAILED) {
                        // @ts-ignore
                        s1.push(s2);
                        // @ts-ignore
                        if (peg$r0.test(input.charAt(peg$currPos))) {
                            // @ts-ignore
                            s2 = input.charAt(peg$currPos);
                            // @ts-ignore
                            peg$currPos++;
                            // @ts-ignore
                        }
                        else {
                            // @ts-ignore
                            s2 = peg$FAILED;
                            // @ts-ignore
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e33);
                            }
                        }
                    }
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s1 = peg$FAILED;
                }
                // @ts-ignore
                if (s1 !== peg$FAILED) {
                    // @ts-ignore
                    if (input.charCodeAt(peg$currPos) === 46) {
                        // @ts-ignore
                        s2 = peg$c32;
                        // @ts-ignore
                        peg$currPos++;
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        s2 = peg$FAILED;
                        // @ts-ignore
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e32);
                        }
                    }
                    // @ts-ignore
                    if (s2 !== peg$FAILED) {
                        // @ts-ignore
                        s3 = [];
                        // @ts-ignore
                        if (peg$r0.test(input.charAt(peg$currPos))) {
                            // @ts-ignore
                            s4 = input.charAt(peg$currPos);
                            // @ts-ignore
                            peg$currPos++;
                            // @ts-ignore
                        }
                        else {
                            // @ts-ignore
                            s4 = peg$FAILED;
                            // @ts-ignore
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e33);
                            }
                        }
                        // @ts-ignore
                        while (s4 !== peg$FAILED) {
                            // @ts-ignore
                            s3.push(s4);
                            // @ts-ignore
                            if (peg$r0.test(input.charAt(peg$currPos))) {
                                // @ts-ignore
                                s4 = input.charAt(peg$currPos);
                                // @ts-ignore
                                peg$currPos++;
                                // @ts-ignore
                            }
                            else {
                                // @ts-ignore
                                s4 = peg$FAILED;
                                // @ts-ignore
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$e33);
                                }
                            }
                        }
                        // @ts-ignore
                        peg$savedPos = s0;
                        // @ts-ignore
                        s0 = peg$f22(s1, s3);
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        peg$currPos = s0;
                        // @ts-ignore
                        s0 = peg$FAILED;
                    }
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                }
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parseintliteral() {
            // @ts-ignore
            var s0, s1, s2;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            s1 = [];
            // @ts-ignore
            if (peg$r0.test(input.charAt(peg$currPos))) {
                // @ts-ignore
                s2 = input.charAt(peg$currPos);
                // @ts-ignore
                peg$currPos++;
                // @ts-ignore
            }
            else {
                // @ts-ignore
                s2 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                    peg$fail(peg$e33);
                }
            }
            // @ts-ignore
            if (s2 !== peg$FAILED) {
                // @ts-ignore
                while (s2 !== peg$FAILED) {
                    // @ts-ignore
                    s1.push(s2);
                    // @ts-ignore
                    if (peg$r0.test(input.charAt(peg$currPos))) {
                        // @ts-ignore
                        s2 = input.charAt(peg$currPos);
                        // @ts-ignore
                        peg$currPos++;
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        s2 = peg$FAILED;
                        // @ts-ignore
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e33);
                        }
                    }
                }
                // @ts-ignore
            }
            else {
                // @ts-ignore
                s1 = peg$FAILED;
            }
            // @ts-ignore
            if (s1 !== peg$FAILED) {
                // @ts-ignore
                peg$savedPos = s0;
                // @ts-ignore
                s1 = peg$f23(s1);
            }
            // @ts-ignore
            s0 = s1;
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parseaccess() {
            // @ts-ignore
            var s0, s1;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            s1 = peg$parseaccess_();
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s1 = peg$f24(s1);
            // @ts-ignore
            s0 = s1;
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parseaccess_() {
            // @ts-ignore
            var s0, s1, s2;
            // @ts-ignore
            s0 = [];
            // @ts-ignore
            s1 = peg$parseidentifier();
            // @ts-ignore
            while (s1 !== peg$FAILED) {
                // @ts-ignore
                s0.push(s1);
                // @ts-ignore
                s1 = peg$currPos;
                // @ts-ignore
                if (input.charCodeAt(peg$currPos) === 46) {
                    // @ts-ignore
                    s2 = peg$c32;
                    // @ts-ignore
                    peg$currPos++;
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s2 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e32);
                    }
                }
                // @ts-ignore
                if (s2 !== peg$FAILED) {
                    // @ts-ignore
                    s2 = peg$parseidentifier();
                    // @ts-ignore
                    if (s2 === peg$FAILED) {
                        // @ts-ignore
                        peg$currPos = s1;
                        // @ts-ignore
                        s1 = peg$FAILED;
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        s1 = s2;
                    }
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s1 = s2;
                }
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parseidentifier() {
            // @ts-ignore
            var s0, s1, s2, s3;
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            if (peg$r1.test(input.charAt(peg$currPos))) {
                // @ts-ignore
                s1 = input.charAt(peg$currPos);
                // @ts-ignore
                peg$currPos++;
                // @ts-ignore
            }
            else {
                // @ts-ignore
                s1 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                    peg$fail(peg$e34);
                }
            }
            // @ts-ignore
            if (s1 !== peg$FAILED) {
                // @ts-ignore
                s2 = [];
                // @ts-ignore
                if (peg$r2.test(input.charAt(peg$currPos))) {
                    // @ts-ignore
                    s3 = input.charAt(peg$currPos);
                    // @ts-ignore
                    peg$currPos++;
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s3 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e35);
                    }
                }
                // @ts-ignore
                while (s3 !== peg$FAILED) {
                    // @ts-ignore
                    s2.push(s3);
                    // @ts-ignore
                    if (peg$r2.test(input.charAt(peg$currPos))) {
                        // @ts-ignore
                        s3 = input.charAt(peg$currPos);
                        // @ts-ignore
                        peg$currPos++;
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        s3 = peg$FAILED;
                        // @ts-ignore
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e35);
                        }
                    }
                }
                // @ts-ignore
                peg$savedPos = s0;
                // @ts-ignore
                s0 = peg$f25(s1, s2);
                // @ts-ignore
            }
            else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parse_() {
            // @ts-ignore
            var s0, s1;
            // @ts-ignore
            s0 = [];
            // @ts-ignore
            if (peg$r3.test(input.charAt(peg$currPos))) {
                // @ts-ignore
                s1 = input.charAt(peg$currPos);
                // @ts-ignore
                peg$currPos++;
                // @ts-ignore
            }
            else {
                // @ts-ignore
                s1 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                    peg$fail(peg$e36);
                }
            }
            // @ts-ignore
            while (s1 !== peg$FAILED) {
                // @ts-ignore
                s0.push(s1);
                // @ts-ignore
                if (peg$r3.test(input.charAt(peg$currPos))) {
                    // @ts-ignore
                    s1 = input.charAt(peg$currPos);
                    // @ts-ignore
                    peg$currPos++;
                    // @ts-ignore
                }
                else {
                    // @ts-ignore
                    s1 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e36);
                    }
                }
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        function peg$parse__() {
            // @ts-ignore
            var s0, s1;
            // @ts-ignore
            s0 = [];
            // @ts-ignore
            if (peg$r3.test(input.charAt(peg$currPos))) {
                // @ts-ignore
                s1 = input.charAt(peg$currPos);
                // @ts-ignore
                peg$currPos++;
                // @ts-ignore
            }
            else {
                // @ts-ignore
                s1 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                    peg$fail(peg$e36);
                }
            }
            // @ts-ignore
            if (s1 !== peg$FAILED) {
                // @ts-ignore
                while (s1 !== peg$FAILED) {
                    // @ts-ignore
                    s0.push(s1);
                    // @ts-ignore
                    if (peg$r3.test(input.charAt(peg$currPos))) {
                        // @ts-ignore
                        s1 = input.charAt(peg$currPos);
                        // @ts-ignore
                        peg$currPos++;
                        // @ts-ignore
                    }
                    else {
                        // @ts-ignore
                        s1 = peg$FAILED;
                        // @ts-ignore
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e36);
                        }
                    }
                }
                // @ts-ignore
            }
            else {
                // @ts-ignore
                s0 = peg$FAILED;
            }
            // @ts-ignore
            return s0;
        }
        // @ts-ignore
        peg$result = peg$startRuleFunction();
        // @ts-ignore
        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            // @ts-ignore
            return peg$result;
            // @ts-ignore
        }
        else {
            // @ts-ignore
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                // @ts-ignore
                peg$fail(peg$endExpectation());
            }
            // @ts-ignore
            throw peg$buildStructuredError(
            // @ts-ignore
            peg$maxFailExpected, 
            // @ts-ignore
            peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, 
            // @ts-ignore
            peg$maxFailPos < input.length
                // @ts-ignore
                ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
                // @ts-ignore
                : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
        }
    }
    // @ts-ignore
    return {
        SyntaxError: peg$SyntaxError,
        parse: peg$parse
    };
})();
peggyParser.SyntaxError.prototype.name = "PeggySyntaxError";
export const parse = peggyParser.parse;
export const PeggySyntaxError = peggyParser.SyntaxError;
//# sourceMappingURL=parser_generated.js.map